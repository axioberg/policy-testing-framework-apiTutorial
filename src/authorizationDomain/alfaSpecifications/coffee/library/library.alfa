namespace demo.library{ 
import demo.*

/*
* Deny if account is not active
*/
policy universalDenyRules{ 
    apply permitOverrides

    /*
    * Denny if account is not active
    */
    rule denyIfAccountSuspended{ 
        deny
        condition not(account.status == "Active")
        on deny{ 
            advice message {
                message.denyReason = "Account is not active"
            }
        }
    }
} //universalDenyRules

/*
* Allow if user is in same country the promotion is offered in
*/
rule allowIfUserInCountryOfPromotion{ 
    permit
    condition promotion.country == user.country
    on permit{ 
        advice message {
            message.permitReason = "User in same country as promotion"
        }
    }
}    

/*
* Account owners are permitted
*/
rule permitAccountOwner{ 
    permit
    condition account.owner == user.uid
    on permit{ 
        advice message {
            message.permitReason = "User is the account owner"
        }
    }
}

/*
* Account members are permitted
*/
rule permitAccountMember{ 
    permit
    condition account.member == user.uid
    on permit{ 
        advice message {
            message.permitReason = "User is a member of account"
        }
    }
}

/*
* Allow Adults On That Account
*/
rule allowAdultsOnThatAccount{ 
    permit
    condition order.accountId == user.accountId && user.age >= 18 && account.class == "Family"
    on permit{ 
        advice message {
            message.permitReason = "Adults on family accounts are allowed"
        }
    }
}

/*
* Allow adults
*/
rule allowAdults{ 
    permit
    condition user.age >= 18
}

/*
* Adults on a family plan can only all orders on the account
*/
rule adultsCanViewAllOrdersOnFamilyAccount{ 
    permit
    condition user.age >= 18
    on permit{ 
        obligation tutorial.attributes.fields{
            tutorial.attributes.mask_fields = "accountBalance"
        }
        advice message {
            message.permitReason = "Adults can view their orders"
        }
    }
}
/*
* Minors on a family plan can only see their own orders on a Family account
*/
rule minorsCanOnlyViewTheirOwnOrders{ 
    permit
    condition order.uid == user.uid && user.age < 18
    on permit{ 
        obligation tutorial.attributes.fields{
            tutorial.attributes.mask_fields = "accountBalance"
        }
        advice message {
            message.permitReason = "Minors can view their orders"
        }
    }
}
/*
* Low Human Score: Multi-Factor AuthN Required
*/
rule lowHumanAssuranceScore{ 
    deny
    condition operation.requiredHumanScore < user.humanScore
    on deny {
        obligation addtionalAction{ 
            message.addtionalAction = "Require MFA"
        }
    }
}

}//library